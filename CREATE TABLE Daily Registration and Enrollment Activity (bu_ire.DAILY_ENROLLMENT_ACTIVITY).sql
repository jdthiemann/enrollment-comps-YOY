/*	Drop existing table */
--DROP TABLE bu_ire.DAILY_ENROLLMENT_ACTIVITY;

/*	Delete data from table */
--DELETE FROM bu_ire.DAILY_ENROLLMENT_ACTIVITY;

/*	Recreate interstitial table with new definitions */
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE bu_ire.DAILY_ENROLLMENT_ACTIVITY
	(
		DEA_ID INT IDENTITY(1,1) NOT NULL
		, STUDENT_ACAD_CRED_ID VARCHAR(15) NOT NULL
		, COURSE_SECTIONS_ID VARCHAR(15) NULL
		, SEC_NAME VARCHAR(20) NULL
		, STUDENT_TERMS_ID VARCHAR(18) NOT NULL
		, STC_PERSON_ID VARCHAR(10) NOT NULL
		, STC_TERM VARCHAR(7) NOT NULL
		, STC_ACAD_LEVEL VARCHAR(2) NOT NULL
		, TERM_RPT_YR INT NOT NULL
		, TERM_SEQ_NO TINYINT NOT NULL
		, TERM_SEQ VARCHAR(7) NOT NULL
		, SUBSESSION VARCHAR(10) NOT NULL
		, TERM_SUB_SEQ VARCHAR(20) NOT NULL
		, STC_CRED DEC(8,5) NULL
		, PF_FLAG VARCHAR(1) NULL
		, STAC_RANK TINYINT NOT NULL
		, STC_STATUS VARCHAR(2) NULL
		, STC_START_DATE DATETIME NULL
		, STC_END_DATE DATETIME NULL
		, UPDATE_DATE DATETIME NOT NULL
		, CONSTRAINT DEA_ID PRIMARY KEY (DEA_ID ASC)
		WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY]
GO

/*	Create table indices */
CREATE INDEX IDX_STUDENT_TERMS_ID ON bu_ire.DAILY_ENROLLMENT_ACTIVITY (STUDENT_TERMS_ID);
CREATE INDEX IDX_STC_PERSON_ID ON bu_ire.DAILY_ENROLLMENT_ACTIVITY (STC_PERSON_ID);
CREATE INDEX IDX_STC_TERM ON bu_ire.DAILY_ENROLLMENT_ACTIVITY (STC_TERM);
CREATE INDEX IDX_STC_ACAD_LEVEL ON bu_ire.DAILY_ENROLLMENT_ACTIVITY (STC_ACAD_LEVEL);

/*	Append today's row of data to the table */
/* uncomment the line below to copy & paste into the SQL Server Agent */
INSERT INTO bu_ire.DAILY_ENROLLMENT_ACTIVITY

SELECT W.*
FROM bu_ire.WAREHOUSE_STC_STATUSES W JOIN ODS_TERMS T ON W.STC_TERM=T.TERMS_ID
WHERE GETDATE() BETWEEN T.B13_TERM_REG_START_DATE AND DATEADD(D,10,T.TERM_END_DATE)
AND CONVERT(DATE,GETDATE()) = CONVERT(DATE,W.STC_END_DATE)

/*	Confirm data loaded correctly */
SELECT *
FROM bu_ire.DAILY_ENROLLMENT_ACTIVITY W
ORDER BY TERM_SEQ, STC_PERSON_ID, SEC_NAME




/*	Drop existing table */
--DROP TABLE bu_ire.DAILY_ENROLLMENT_REPORT;

/*	Delete data from table */
--DELETE FROM bu_ire.DAILY_ENROLLMENT_REPORT;

/*	Recreate final table with new definitions */
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE bu_ire.DAILY_ENROLLMENT_REPORT
	(
		DER_ID INT IDENTITY(1,1) NOT NULL
		, STC_PERSON_ID VARCHAR(7) NOT NULL
		, STC_TERM VARCHAR(7) NOT NULL
		, STUDENT_ACAD_CRED_ID VARCHAR(15) NOT NULL
		, COURSE_SECTIONS_ID VARCHAR(15) NULL
		, STC_DAY0 VARCHAR(25) NULL
		, STC_DAY1 VARCHAR(25) NULL
		, D0_STAT VARCHAR(2) NULL
		, D1_STAT VARCHAR(2) NULL
		, D0_CRED DEC(8,5) NULL
		, D1_CRED DEC(8,5) NULL
		, D0_PFLAG VARCHAR(1) NULL
		, D1_PFLAG VARCHAR(1) NULL
		, DAY0 DATETIME NULL
		, DAY1 DATETIME NULL
		, ACTIVITY_TYPE VARCHAR(10) NULL
		, UPDATE_DATE DATETIME NOT NULL
		, CONSTRAINT DER_ID PRIMARY KEY (DER_ID ASC)
		WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY]
GO

/*	Create table indices */
CREATE INDEX IDX_STC_PERSON_ID ON bu_ire.DAILY_ENROLLMENT_REPORT (STC_PERSON_ID);
CREATE INDEX IDX_STC_TERM ON bu_ire.DAILY_ENROLLMENT_REPORT (STC_TERM);
CREATE INDEX IDX_ACTIVITY ON bu_ire.DAILY_ENROLLMENT_REPORT (ACTIVITY_TYPE);


/*	Compare daily data to identify anyone with an enrollment change */
/* uncomment the line below to copy & paste into the SQL Server Agent */
INSERT INTO bu_ire.DAILY_ENROLLMENT_REPORT

SELECT
	STC_PERSON_ID
	, STC_TERM
	, STUDENT_ACAD_CRED_ID
	, COURSE_SECTIONS_ID
	, STC_DAY0, STC_DAY1
	, D0_STAT, D1_STAT
	, D0_CRED, D1_CRED
	, D0_PFLAG, D1_PFLAG
	, CONVERT(DATETIME,DAY0) AS DAY0
	, CONVERT(DATETIME,DAY1) AS DAY1
	, CASE
			WHEN STC_DAY0 IS NULL THEN 'New'
			WHEN STC_DAY0 <> STC_DAY1 THEN 'Change'
		END AS ACTIVITY_TYPE
	, GETDATE() AS UPDATE_DATE

FROM
	(
		SELECT
			X.STC_PERSON_ID
			, X.STC_TERM
			, X.STUDENT_ACAD_CRED_ID
			, X.COURSE_SECTIONS_ID
			, D0.STUDENT_ACAD_CRED_ID+'*'+D0.STC_STATUS+'*'+ISNULL(CONVERT(VARCHAR,CAST(D0.STC_CRED AS DEC(5,2))),'NULL')+'*'+ISNULL(D0.PF_FLAG,'N') AS STC_DAY0
			, D1.STUDENT_ACAD_CRED_ID+'*'+D1.STC_STATUS+'*'+ISNULL(CONVERT(VARCHAR,CAST(D1.STC_CRED AS DEC(5,2))),'NULL')+'*'+ISNULL(D1.PF_FLAG,'N') AS STC_DAY1
			, D0.STC_STATUS AS D0_STAT
			, D1.STC_STATUS AS D1_STAT
			, D0.STC_CRED AS D0_CRED
			, D1.STC_CRED AS D1_CRED
			, D0.PF_FLAG AS D0_PFLAG
			, D1.PF_FLAG AS D1_PFLAG
			, X.DAY0
			, X.DAY1

		FROM
			(
				SELECT DISTINCT W.STC_PERSON_ID, W.STC_TERM, W.STUDENT_ACAD_CRED_ID, W.COURSE_SECTIONS_ID, CONVERT(DATE,DATEADD(D,-1,GETDATE())) AS DAY0, CONVERT(DATE,GETDATE()) AS DAY1
				FROM bu_ire.DAILY_ENROLLMENT_ACTIVITY W
				WHERE DATEDIFF(D,W.UPDATE_DATE,GETDATE()) BETWEEN 0 AND 1
			) X

			LEFT OUTER JOIN
				(
					SELECT *
					FROM bu_ire.DAILY_ENROLLMENT_ACTIVITY W
					WHERE DATEDIFF(D,W.UPDATE_DATE,GETDATE()) = 1
				) D0 ON X.STUDENT_ACAD_CRED_ID=D0.STUDENT_ACAD_CRED_ID

			LEFT OUTER JOIN
				(
					SELECT *
					FROM bu_ire.DAILY_ENROLLMENT_ACTIVITY W
					WHERE DATEDIFF(D,W.UPDATE_DATE,GETDATE()) = 0
				) D1 ON X.STUDENT_ACAD_CRED_ID=D1.STUDENT_ACAD_CRED_ID
		) Y

WHERE STC_DAY0 <> STC_DAY1 OR STC_DAY0 IS NULL OR STC_DAY1 IS NULL
ORDER BY 2, 1, 3

/*	Confirm data loaded correctly */
SELECT *
FROM bu_ire.DAILY_ENROLLMENT_REPORT

/*	Delete data from warehouse once the term has ended */
DELETE E FROM bu_ire.DAILY_ENROLLMENT_ACTIVITY E
JOIN ODS_TERMS T ON E.STC_TERM=T.TERMS_ID
WHERE DATEADD(D,10,T.TERM_END_DATE) < GETDATE()

/*	Revision history:
		JDT 9/28/2020: Created view to explicitly identify any student with enrollment changes from day to day in any active term. This functions
				by archiving the actual course section enrollment for each student on Day 0 and then comparing it to Day 1 enrollments, which will form
				the basis of a major rebuild of the Daily Enrollment Activity suite of reports, which up to this point have consistently included a lot of
				false positives because of their reliance on the STUDENT_ACAD_CRED metadata to determine when a student's enrollment has changed.
*/
