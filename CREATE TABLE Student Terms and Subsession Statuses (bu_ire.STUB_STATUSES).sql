/*	Drop existing table */
--DROP TABLE bu_ire.STUB_STATUSES;

/*	Delete existing data from table */
--DELETE FROM bu_ire.STUB_STATUSES;

/*	Recreate table with new definitions */
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE bu_ire.STUB_STATUSES
	(
		STUDENT_TERMS_ID VARCHAR(18) NOT NULL
		, STUDENT_TERMS_SUB_ID VARCHAR(30) NOT NULL
		, POS INT NOT NULL
		, STC_PERSON_ID VARCHAR(10) NOT NULL
		, STC_TERM VARCHAR(7) NOT NULL
		, SUBSESSION VARCHAR(10) NOT NULL
		, STC_ACAD_LEVEL VARCHAR(2) NOT NULL
		, STUB_STATUS VARCHAR(1) NULL
		, STUB_STATUS_DATE DATETIME NULL
		, STUB_REG_DATE DATETIME NULL
		, UPDATE_DATE DATETIME NOT NULL
		, CONSTRAINT STUB_ID_RANK PRIMARY KEY (STUDENT_TERMS_SUB_ID ASC, POS ASC)
		WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY]
GO

/*	Create table indices */
CREATE INDEX IDX_STUDENT_TERMS_ID ON bu_ire.STUB_STATUSES (STUDENT_TERMS_ID);
CREATE INDEX IDX_STUDENT_TERMS_SUB_ID ON bu_ire.STUB_STATUSES (STUDENT_TERMS_SUB_ID);
CREATE INDEX IDX_STC_PERSON_ID ON bu_ire.STUB_STATUSES (STC_PERSON_ID);
CREATE INDEX IDX_STC_TERM ON bu_ire.STUB_STATUSES (STC_TERM);
CREATE INDEX IDX_SUBSESSION ON bu_ire.STUB_STATUSES (SUBSESSION);
CREATE INDEX IDX_STC_ACAD_LEVEL ON bu_ire.STUB_STATUSES (STC_ACAD_LEVEL);

/*	Rebuild data in table */
;WITH STUB_STAT (STUDENT_TERMS_ID, STUDENT_TERMS_SUB_ID, POS, STC_PERSON_ID, STC_TERM, SUBSESSION, STC_ACAD_LEVEL, STUB_STATUS, STUB_STATUS_DATE) AS
	(
		SELECT
			STC_PERSON_ID+'*'+STC_TERM+'*'+STC_ACAD_LEVEL AS STUDENT_TERMS_ID
			, STUDENT_TERMS_SUB_ID
			, ROW_NUMBER() OVER(PARTITION BY STUDENT_TERMS_SUB_ID ORDER BY TEST_DATE DESC) AS POS
			, STC_PERSON_ID
			, STC_TERM
			, SUBSESSION
			, STC_ACAD_LEVEL
			, STUB_STATUS
			, TEST_DATE AS STUB_STATUS_DATE

		FROM
			(
				SELECT
					STC_PERSON_ID
					, STC_TERM
					, SUBSESSION
					, STC_ACAD_LEVEL
					, STUDENT_TERMS_SUB_ID
					, CASE
							WHEN LAG(STUDENT_TERMS_SUB_ID,1) OVER(ORDER BY STUDENT_TERMS_SUB_ID, BATES_STAMP) <> STUDENT_TERMS_SUB_ID THEN STUB_STATUS
							WHEN LAG(STUDENT_TERMS_SUB_ID,1) OVER(ORDER BY STUDENT_TERMS_SUB_ID, BATES_STAMP) IS NULL THEN STUB_STATUS
							WHEN LAG(STUDENT_TERMS_SUB_ID,1) OVER(ORDER BY STUDENT_TERMS_SUB_ID, BATES_STAMP) = STUDENT_TERMS_SUB_ID
								AND LAG(STUB_STATUS,1) OVER(ORDER BY STUDENT_TERMS_SUB_ID, BATES_STAMP) <> STUB_STATUS
								THEN STUB_STATUS
							ELSE NULL
						END AS STUB_STATUS
					, CASE
							WHEN LAG(STUDENT_TERMS_SUB_ID,1) OVER(ORDER BY STUDENT_TERMS_SUB_ID, BATES_STAMP) <> STUDENT_TERMS_SUB_ID THEN TEST_DATE
							WHEN LAG(STUDENT_TERMS_SUB_ID,1) OVER(ORDER BY STUDENT_TERMS_SUB_ID, BATES_STAMP) IS NULL THEN TEST_DATE
							WHEN LAG(STUDENT_TERMS_SUB_ID,1) OVER(ORDER BY STUDENT_TERMS_SUB_ID, BATES_STAMP) = STUDENT_TERMS_SUB_ID
								AND LAG(STUB_STATUS,1) OVER(ORDER BY STUDENT_TERMS_SUB_ID, BATES_STAMP) <> STUB_STATUS
								THEN TEST_DATE
							ELSE NULL
						END AS TEST_DATE

				FROM
					(
						SELECT
							E.STC_PERSON_ID
							, E.STC_TERM
							, E.SUBSESSION
							, E.STC_ACAD_LEVEL
							, E.STUDENT_TERMS_SUB_ID
							, T.BATES_STAMP
							, T.TEST_DATE
							, MIN(CASE WHEN E.STC_STATUS IN ('A', 'N') THEN 'R' ELSE E.STC_STATUS END) AS STUB_STATUS
				
						FROM
							bu_ire.WAREHOUSE_STC_STATUSES_TEST E
							JOIN bu_ire.TERM_SUB_DATES_CTE T ON E.TERM_SUB_SEQ=T.TERM_SEQ+'*'+T.SUBSESSION AND T.TEST_DATE BETWEEN E.STC_START_DATE AND E.STC_END_DATE
	
						WHERE
							E.STC_STATUS IN ('A', 'N', 'D', 'W', 'X', 'C')
	
						GROUP BY E.STC_PERSON_ID, E.STC_TERM, E.SUBSESSION, E.STC_ACAD_LEVEL, E.STUDENT_TERMS_SUB_ID, T.BATES_STAMP, T.TEST_DATE
					) X1
			) X
		WHERE	STUB_STATUS IS NOT NULL
	)

/*	uncomment the line below to copy & paste into SQL Server Agent */
INSERT INTO bu_ire.STUB_STATUSES

SELECT S.*, F.STUB_REG_DATE, GETDATE() AS UPDATE_DATE
FROM
	STUB_STAT S
	LEFT OUTER JOIN
		(
			SELECT STUDENT_TERMS_SUB_ID, MIN(STUB_STATUS_DATE) AS STUB_REG_DATE
			FROM STUB_STAT S
			GROUP BY STUDENT_TERMS_SUB_ID
		) F ON S.STUDENT_TERMS_SUB_ID=F.STUDENT_TERMS_SUB_ID
ORDER BY 1, 3


/*	Confirm the data exist */
SELECT *
FROM bu_ire.STUB_STATUSES
ORDER BY 1, 2


/*	Revision history:
		JDT 5/29/2020: Created view to replicate the STTR_STATUSES table from Colleague with the addition of subsessions.
*/
