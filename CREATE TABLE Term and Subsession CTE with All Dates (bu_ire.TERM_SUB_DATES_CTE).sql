/*	Drop existing table */
--DROP TABLE bu_ire.TERM_SUB_DATES_CTE

/*	Delete data from table */
--DELETE FROM bu_ire.TERM_SUB_DATES_CTE

/*	Recreate table with new definitions */
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE bu_ire.TERM_SUB_DATES_CTE
	(
		TERM VARCHAR(7) NOT NULL
		, TERM_DESC VARCHAR(40) NULL
		, SUBSESSION VARCHAR(5) NULL
		, SUBSESSION_DESC VARCHAR(40) NULL
		, TERM_SUB_ID VARCHAR(14) NOT NULL
		, TERM_SUB_DESC VARCHAR(50) NULL
		, TERM_SEASON VARCHAR(10) NULL
		, TEST_DATE DATETIME NULL
		, TERM_REG_DATE DATETIME NULL
		, TERM_START_DATE DATETIME NULL
		, SUB_START_DATE DATETIME NULL
		, TERM_CENSUS_DATE DATETIME NULL
		, TERM_END_DATE DATETIME NULL
		, BATES_STAMP INT NOT NULL
		, TERM_RPT_YR_STRING VARCHAR(4) NOT NULL
		, TERM_RPT_YR_NUMERIC INT NOT NULL
		, TERM_SEQ_NO TINYINT NOT NULL
		, TERM_SEQ VARCHAR(7) NOT NULL
		, COLLEAGUE_FLAG VARCHAR(1) NULL
		, LAST_TERM1 VARCHAR(10) NULL
		, LAST_TERM2 VARCHAR(10) NULL
		, UPDATE_DATE DATETIME
		, CONSTRAINT YEAR_TERM_SUB_DATE_STAMP PRIMARY KEY (TERM_RPT_YR_NUMERIC ASC, TERM_SEQ_NO ASC, TERM_SUB_ID ASC, BATES_STAMP ASC)
		WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY]
GO

/*	Create table indices */
CREATE INDEX IDX_TERM_SEQ ON bu_ire.TERM_SUB_DATES_CTE (TERM_SEQ);
CREATE INDEX IDX_TERM ON bu_ire.TERM_SUB_DATES_CTE (TERM);
CREATE INDEX IDX_TERM_SUB_ID ON bu_ire.TERM_SUB_DATES_CTE (TERM_SUB_ID);



/*	Rebuild data in table */
;WITH TERM_SUB_CTE (TERM, SUBSESSION, SUBSESSION_DESC, TERM_SUB_ID, TEST_DATE, BATES_STAMP, TERM_END_DATE, LAST_TERM1, LAST_TERM2) AS
	(
		SELECT
			T.TERMS_ID AS TERM
			, COALESCE(CST.SUBSESSION,RIGHT(T.TERMS_ID,2)+'FT') AS SUBSESSION
			, COALESCE(CST.SUBSESSION_DESC,CASE RIGHT(T.TERMS_ID,2) WHEN 'FA' THEN 'Fall' WHEN 'SP' THEN 'Spring' WHEN 'SU' THEN 'Summer' END+' Full Term') AS SUBSESSION_DESC
			, T.TERMS_ID+'*'+COALESCE(CST.SUBSESSION,RIGHT(T.TERMS_ID,2)+'FT') AS TERM_SUB_ID
			, T.B13_TERM_REG_START_DATE AS TEST_DATE
			, COALESCE(DATEDIFF(DAY, CST.SUB_START_DATE, T.B13_TERM_REG_START_DATE),DATEDIFF(DAY, T.TERM_START_DATE, T.B13_TERM_REG_START_DATE)) AS BATES_STAMP
			, T.TERM_END_DATE
			, CASE RIGHT(T.TERMS_ID,2)
					WHEN 'FA' THEN LEFT(T.TERMS_ID,4)+'SU'
					WHEN 'SU' THEN LEFT(T.TERMS_ID,4)+'SP'
					WHEN 'SP' THEN CONVERT(VARCHAR(4),CAST(LEFT(T.TERMS_ID,4) AS INT)-1)+'FA'
				END AS LAST_TERM1
			, CASE RIGHT(T.TERMS_ID,2)
					WHEN 'FA' THEN LEFT(T.TERMS_ID,4)+'SP'
					WHEN 'SU' THEN CONVERT(VARCHAR(4),CAST(LEFT(T.TERMS_ID,4) AS INT)-1)+'FA'
					WHEN 'SP' THEN CONVERT(VARCHAR(4),CAST(LEFT(T.TERMS_ID,4) AS INT)-1)+'SU'
				END AS LAST_TERM2

		FROM
			ODS_TERMS T
			LEFT OUTER JOIN
				(
					SELECT CS.SEC_TERM, CT.SUBSESSION, CT.SUBSESSION_DESC, MIN(CS.SEC_START_DATE) AS SUB_START_DATE
					FROM ODS_COURSE_SECTIONS CS LEFT OUTER JOIN B13_COURSE_TYPES_FLAT CT ON CS.COURSE_SECTIONS_ID=CT.COURSE_SECTIONS_ID
					WHERE CS.SEC_CURRENT_STATUS = 'A' AND RIGHT(CS.SEC_TERM,2) IN ('FA', 'SP', 'SU') AND CT.SUBSESSION IS NOT NULL AND CS.COURSE_SECTIONS_ID<>'11705'
					GROUP BY CS.SEC_TERM, CT.SUBSESSION, CT.SUBSESSION_DESC
					UNION
					SELECT CS.SEC_TERM, RIGHT(CS.SEC_TERM,2)+'FT', CASE RIGHT(CS.SEC_TERM,2) WHEN 'FA' THEN 'Fall' WHEN 'SP' THEN 'Spring' END+' Full Term', MIN(CS.SEC_START_DATE)
					FROM ODS_COURSE_SECTIONS CS
					WHERE CS.SEC_CURRENT_STATUS = 'A' AND RIGHT(CS.SEC_TERM,2) IN ('FA', 'SP')
					GROUP BY CS.SEC_TERM
				) CST ON T.TERMS_ID=CST.SEC_TERM

		WHERE
			RIGHT(T.TERMS_ID,2) IN ('FA', 'SP', 'SU')
			AND T.B13_TERM_REG_START_DATE <= GETDATE()

		UNION ALL

		SELECT
			T.TERM
			, T.SUBSESSION
			, T.SUBSESSION_DESC
			, T.TERM_SUB_ID
			, DATEADD(DAY, 1, T.TEST_DATE)
			, T.BATES_STAMP+1
			, T.TERM_END_DATE
			, T.LAST_TERM1
			, T.LAST_TERM2
		
		FROM
			TERM_SUB_CTE T
		
		WHERE
			T.TEST_DATE <= DATEADD(DAY, -1, GETDATE())
			AND T.TEST_DATE <= DATEADD(DAY, 10, T.TERM_END_DATE)
	)

/*	check CTE */
/*
SELECT * FROM TERM_SUB_CTE
OPTION (MAXRECURSION 1000)
*/


/* remove comment from line below to copy & paste into SQL Server Agent */
INSERT INTO bu_ire.TERM_SUB_DATES_CTE

SELECT
	T.TERM
	, TM.TERM_DESC
	, COALESCE(CST.SUBSESSION,RIGHT(T.TERM,2)+'FT') AS SUBSESSION
	, COALESCE(CST.SUBSESSION_DESC,CASE RIGHT(T.TERM,2) WHEN 'FA' THEN 'Fall ' WHEN 'SP' THEN 'Spring ' WHEN 'SU' THEN 'Summer ' END+'Full Term') AS SUBSESSION_DESC
	, COALESCE(T.TERM_SUB_ID,T.TERM+'*'+RIGHT(T.TERM,2)+'FT') AS TERM_SUB_ID
	, CASE
			WHEN CST.SUBSESSION_DESC IS NOT NULL THEN LEFT(T.TERM,4)+' '+CST.SUBSESSION_DESC
			ELSE LEFT(T.TERM,4)+' '+CASE RIGHT(T.TERM,2) WHEN 'FA' THEN 'Fall ' WHEN 'SP' THEN 'Spring ' WHEN 'SU' THEN 'Summer ' END+'Full Term'
		END AS TERM_SUB_DESC
	, CASE RIGHT(T.TERM,2)
			WHEN 'FA' THEN 'Fall'
			WHEN 'SP' THEN 'Spring'
			WHEN 'SU' THEN 'Summer'
		END AS TERM_SEASON
	, T.TEST_DATE
	, TM.B13_TERM_REG_START_DATE AS TERM_REG_DATE
	, TM.TERM_START_DATE
	, COALESCE(CST.SUB_START_DATE,TM.TERM_START_DATE) AS SUB_START_DATE
	, CASE
			WHEN CST.SUB_START_DATE IS NOT NULL AND CST.SUB_START_DATE > TM.B13_TERM_CENSUS_DATE THEN DATEADD(D,1,CST.SUB_START_DATE)
			ELSE TM.B13_TERM_CENSUS_DATE
		END AS TERM_CENSUS_DATE
	, TM.TERM_END_DATE
	, T.BATES_STAMP
	, CONVERT(VARCHAR(4),TM.TERM_REPORTING_YEAR) AS TERM_RPT_YR_STRING
	, CAST(TM.TERM_REPORTING_YEAR AS INT) AS TERM_RPT_YR_NUMERIC
	, TM.B13_TERM_SEQUENCE_NO AS TERM_SEQ_NO
	, CONVERT(VARCHAR(4),TM.TERM_REPORTING_YEAR)+'*'+CONVERT(VARCHAR(1),TM.B13_TERM_SEQUENCE_NO) AS TERM_SEQ
	, CASE
			WHEN TM.TERM_REPORTING_YEAR >= '2016' THEN 'Y'
			ELSE 'N'
		END AS COLLEAGUE_FLAG
	, T.LAST_TERM1
	, T.LAST_TERM2
	, GETDATE() AS UPDATE_DATE
	
FROM
	TERM_SUB_CTE T
	JOIN ODS_TERMS TM ON T.TERM=TM.TERMS_ID
	LEFT OUTER JOIN
		(
			SELECT CS.SEC_TERM, CT.SUBSESSION, CT.SUBSESSION_DESC, MIN(CS.SEC_START_DATE) AS SUB_START_DATE
			FROM ODS_COURSE_SECTIONS CS LEFT OUTER JOIN B13_COURSE_TYPES_FLAT CT ON CS.COURSE_SECTIONS_ID=CT.COURSE_SECTIONS_ID
			WHERE CS.SEC_CURRENT_STATUS = 'A' AND RIGHT(CS.SEC_TERM,2) IN ('FA', 'SP', 'SU') AND CT.SUBSESSION IS NOT NULL AND CS.COURSE_SECTIONS_ID<>'11705'
			GROUP BY CS.SEC_TERM, CT.SUBSESSION, CT.SUBSESSION_DESC
		) CST ON T.TERM=CST.SEC_TERM AND T.SUBSESSION=CST.SUBSESSION

ORDER BY TM.TERM_REPORTING_YEAR, TM.B13_TERM_SEQUENCE_NO, T.TERM_SUB_ID, T.BATES_STAMP
OPTION (MAXRECURSION 1000)


/*	Confirm data loaded correctly */
SELECT *
FROM bu_ire.TERM_SUB_DATES_CTE
ORDER BY 16, 14, 5


/*	Revision history:
		JDT 6/4/2020: Fixed problem where FAFT and SPFT rows were not being generated.
		JDT 6/2/2020: Added last term 1 and 2.
		JDT 3/31/2020: Created file to build enrollment comparisons at the level of subsessions (particularly useful for summer term enrollment analysis).
*/
